{"version":2,"kind":"Notebook","sha256":"a37d66f9e613040b402a9d221fa445bc782f81e257be0ce71815bb9cbc20fe2f","slug":"notebooks.preprocessing","location":"/notebooks/preprocessing.ipynb","dependencies":[],"frontmatter":{"title":"Preprocessing data","authors":[{"nameParsed":{"literal":"Tasha Snow","given":"Tasha","family":"Snow"},"name":"Tasha Snow","affiliations":["umd"],"id":"contributors-preprocessing-generated-uid-0"}],"affiliations":[{"id":"umd","name":"University of Maryland","department":"ESSIC"}],"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"open_access":true,"github":"https://github.com/projectpythia/landsatproduct-cookbook","copyright":"2025","edit_url":"https://github.com/projectpythia/landsatproduct-cookbook/blob/HEAD/notebooks/preprocessing.ipynb","exports":[{"format":"ipynb","filename":"preprocessing.ipynb","url":"/landsatproduct-cookbook/_preview/30/build/preprocessing-5aceda68370986a6e46e21a4ddec54b9.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%pip install -q intake-stac","key":"RO0XxJlnru"},{"type":"output","id":"RIN7xhJvYgriyCk4ZoCCX","data":[{"output_type":"stream","name":"stdout","text":"\u001b[33m    WARNING: Ignoring invalid distribution ~array (/home/runner/micromamba/envs/landsat-product-cookbook-dev/lib/python3.13/site-packages)\u001b[0m\u001b[33m\r\n\u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[33mWARNING: Ignoring invalid distribution ~array (/home/runner/micromamba/envs/landsat-product-cookbook-dev/lib/python3.13/site-packages)\u001b[0m\u001b[33m\r\n\u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nintake-esm 2024.2.6 requires intake<2,>=0.6.6, but you have intake 2.0.8 which is incompatible.\u001b[0m\u001b[31m\r\n\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution ~array (/home/runner/micromamba/envs/landsat-product-cookbook-dev/lib/python3.13/site-packages)\u001b[0m\u001b[33m\r\n\u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[33mWARNING: Ignoring invalid distribution ~array (/home/runner/micromamba/envs/landsat-product-cookbook-dev/lib/python3.13/site-packages)\u001b[0m\u001b[33m\r\n\u001b[0m"},{"output_type":"stream","name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n"}],"key":"fNon2M251h"}],"key":"x1SXf6mnPw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Preprocessing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fSTbV7TLfD"}],"identifier":"preprocessing","label":"Preprocessing","html_id":"preprocessing","implicit":true,"key":"mWdMaMXi3q"}],"key":"a7jol9aytZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Once you have acquired your data, the next step is ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DPwVji2Hq5"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"preprocessing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eZ4N5ovzOu"}],"key":"xDM2omY98z"},{"type":"text","value":"â€”preparing the data for computing the retrieval and generating the final data product. Preprocessing will include one or more of the following tasks:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YYOjDyHiQV"}],"key":"TDZOGk6ltn"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://realpython.com/python-data-cleaning-numpy-pandas/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Cleaning","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZQbZbsY29h"}],"urlSource":"https://realpython.com/python-data-cleaning-numpy-pandas/","key":"HBz5sQbT50"}],"key":"OqqGfbiH8V"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://pint.readthedocs.io/en/stable/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Unit conversion","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"oDazfYalw6"}],"urlSource":"https://pint.readthedocs.io/en/stable/","key":"d7ZZUuaAae"}],"key":"JUSPQFO1JX"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://pyproj4.github.io/pyproj/stable/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Reprojection","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zzxFOZrCTS"}],"urlSource":"https://pyproj4.github.io/pyproj/stable/","key":"kGBfBJolB2"}],"key":"wKyJbmsxwA"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://xesmf.readthedocs.io/en/latest/","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Regridding","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"wwjxnQuw6J"}],"urlSource":"https://xesmf.readthedocs.io/en/latest/","key":"xPOXe27nFf"}],"key":"VtBQeHNAAB"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Normalization","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"O1jrsBDeMx"}],"urlSource":"https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler","key":"lra1svQH7g"}],"key":"olVddzmMhS"}],"key":"giInMC1GO6"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Each of these steps helps standardize the data so it can be combined, compared, or analyzed reliably.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Pos1uAYPXN"}],"key":"Z5HnbegUPb"},{"type":"thematicBreak","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"hBFNymUBpF"},{"type":"heading","depth":3,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"ðŸ”§ Preprocessing Steps","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"IIp6HJENcT"}],"identifier":"id-preprocessing-steps","label":"ðŸ”§ Preprocessing Steps","html_id":"id-preprocessing-steps","implicit":true,"key":"sOelfRG5j5"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"ðŸ”¹ Cleaning","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Z3APFglNam"}],"key":"sCYAB695NU"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Data cleaning","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"nEP7XIWD8F"}],"key":"qvt4eoDPxF"},{"type":"text","value":" is required when the dataset contains missing values, outliers, or artifacts that could bias the analysis. This might include filtering NaNs, removing physically impossible values, or masking bad pixels.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"WsaLjnOSSi"}],"key":"GbEa3DjasC"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"To clean the data, you typically:","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Zjhj9evDTn"}],"key":"IccpJWs7Tr"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":19,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Identify invalid or missing values.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"J3b9USBeBF"}],"key":"dnlmbdhcAW"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Mask or remove unreliable data.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"tXFSaTV4wX"}],"key":"AEhSTuCUwW"},{"type":"listItem","spread":true,"position":{"start":{"line":21,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Optionally, interpolate or fill gaps as needed.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"htE6DrRvqu"}],"key":"Ra5o53ZUVc"}],"key":"Unzpv2XRZq"},{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"ðŸ“š ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"neHKM53T3W"},{"type":"link","url":"https://realpython.com/python-data-cleaning-numpy-pandas/","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Tutorial: Data Cleaning with Pandas and NumPy (RealPython)","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"CefHZMKUcG"}],"urlSource":"https://realpython.com/python-data-cleaning-numpy-pandas/","key":"Nyg9LZGuuu"}],"key":"Gon41fM1Yn"}],"key":"XJSf5meak5"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"ðŸ”¹ Unit Conversion","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"yUD6Q1gCYc"}],"key":"M6E3qHczOW"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"strong","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Unit conversion","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"DNV8j0WXWY"}],"key":"SRCDqCMNXs"},{"type":"text","value":" is needed when datasets use different physical units (e.g., Kelvin vs. Celsius, W/mÂ² vs. mW/cmÂ²) or when preparing inputs for physical equations that require standardized units.","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"MyscMR4jKg"}],"key":"FZfi4pItin"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"This may also require spatial integration (e.g., converting a flux to energy) to match units over time and space.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"sHgJGBmjgF"}],"key":"JJXYZCjnzf"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"ðŸ“š ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"KZMwHxWqYL"},{"type":"link","url":"https://pint.readthedocs.io/en/stable/","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Pint Documentation â€“ Units in Python","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"sweN6vAqOt"}],"urlSource":"https://pint.readthedocs.io/en/stable/","key":"bsUvGJ3zcD"}],"key":"sbM3EKy9S3"}],"key":"EKl5bqvP36"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"ðŸ”¹ Reprojection","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"molGtuY8Ec"}],"key":"s0xto7KB8g"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"strong","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Reprojection","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"uqyb8BFDnl"}],"key":"jZvWX0kyBQ"},{"type":"text","value":" is required when datasets are provided in different coordinate reference systems (CRS). Working with mismatched projections can lead to spatial misalignmentâ€”features may not overlap or align correctly.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"nhHLzds0oq"}],"key":"yU0MBiMwcp"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"To reproject data:","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"KzcQdRIm8J"}],"key":"siAzix2hvy"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":38,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Determine the CRS of each dataset.","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"yQ2HH91MfX"}],"key":"iDRnpTaI5F"},{"type":"listItem","spread":true,"position":{"start":{"line":39,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"Use geospatial tools to transform to a common projection.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"dx2QlDye2d"}],"key":"fnWTeTT9RQ"}],"key":"wDywzuBimG"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"ðŸ“š ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"h4Q4DQxDpg"},{"type":"link","url":"https://pyproj4.github.io/pyproj/stable/","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Pyproj Documentation","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"gmTFxrG3jr"}],"urlSource":"https://pyproj4.github.io/pyproj/stable/","key":"rxNByzi3aO"}],"key":"GMEIlRyBNf"}],"key":"sMnTnp7xXF"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"ðŸ”¹ Regridding","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"yLrGKTorLL"}],"key":"Zsr1vHMj2o"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"strong","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Regridding","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"ZzfDt1qTnt"}],"key":"XH5AhFNzyd"},{"type":"text","value":" is used when datasets have different spatial resolutions or grid layouts and need to be brought onto a common grid. For example, satellite data may be on a swath-based grid while model output is on a regular latitude-longitude grid.","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"N929z2gaSs"}],"key":"Wywc1AsP8p"},{"type":"paragraph","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"This step ensures datasets are co-located in space and is critical for any pixel-wise comparison or combination.","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"na9NHVNzaU"}],"key":"eI5JfRU4hJ"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"ðŸ“š ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"kIkY9xWDan"},{"type":"link","url":"https://xesmf.readthedocs.io/en/latest/","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"xESMF for Regridding","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"l6gAAbLLsq"}],"urlSource":"https://xesmf.readthedocs.io/en/latest/","key":"s0UrXcn4qX"}],"key":"I08ZnZAdWW"}],"key":"phzh7HIBmT"},{"type":"details","children":[{"type":"summary","children":[{"type":"text","value":"ðŸ”¹ Normalization","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"FIA1SpO04v"}],"key":"Fig4dk9MJG"},{"type":"paragraph","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"children":[{"type":"strong","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"children":[{"type":"text","value":"Normalization","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"key":"mrgE10s7CS"}],"key":"bRI4103BsF"},{"type":"text","value":" rescales data so that it is on a consistent numerical scale, especially important when combining variables with different units or orders of magnitude as inputs to a model (e.g., temperature vs. elevation vs. reflectance).","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"key":"C7qoijSj1u"}],"key":"Ti0AUNJfWK"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"For example, normalizing input features before passing them into a machine learning model helps ensure each variable contributes proportionally.","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"hweI9EiALz"}],"key":"xjAXoRnOYM"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"ðŸ“š ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"S1yffWcMGM"},{"type":"link","url":"https://scikit-learn.org/stable/modules/preprocessing.html","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"scikit-learn Preprocessing: Normalization and Scaling","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"fT3q3GDLiK"}],"urlSource":"https://scikit-learn.org/stable/modules/preprocessing.html","key":"kDQIueKx3z"}],"key":"t12YCsOzRI"}],"key":"BTThIzXCo7"},{"type":"thematicBreak","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"N2vkGrnEgj"}],"key":"uDzcjw6ANu"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ea2cWKea11"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sea Surface Temperature (SST)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JpRmeyMmG8"}],"key":"NRWHRd2FN8"},{"type":"text","value":" workflow demonstrated in this cookbook, we will be using all of the preprocessing steps.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yVX4KLyzy7"}],"key":"RVYkDWojdv"}],"key":"K9zzFtmznY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Read in Landsat thermal data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Mo51Nh9Yh2"}],"identifier":"read-in-landsat-thermal-data","label":"Read in Landsat thermal data","html_id":"read-in-landsat-thermal-data","implicit":true,"key":"rlZQbvz43w"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Letâ€™s begin by reading in the data we acquired previously in the Data Access notebook.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rhFLCmyXq5"}],"key":"LYN13BLPLK"}],"key":"lOzdiiE7Bg"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We read in all paths and parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AsZnasgcZs"}],"key":"DlDgOZKdVG"}],"key":"kpfR719k3u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cd /home/jovyan/landsatproduct-cookbook/","key":"wd3WLmow5h"},{"type":"output","id":"toLC3RMIE5huSHgR0pIdG","data":[{"output_type":"stream","name":"stdout","text":"[Errno 2] No such file or directory: '/home/jovyan/landsatproduct-cookbook/'\n/home/runner/work/landsatproduct-cookbook/landsatproduct-cookbook/notebooks\n"}],"key":"RWqsQO9vSi"}],"key":"yxGEkZt3qn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib widget\n\n%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nimport os\nimport boto3\nfrom rasterio.session import AWSSession\nimport earthaccess\nimport intake\nimport xarray as xr\nfrom shapely.geometry.polygon import Polygon\nimport geopandas as gpd\n\nimport SSTutils as stu\n\nimport warnings\nwarnings.filterwarnings('ignore')","key":"KhG7VHuZrW"},{"type":"output","id":"YEYhyY72SaXciXVjwgjFk","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 16\u001b[39m\n\u001b[32m     13\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mshapely\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mgeometry\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mpolygon\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m Polygon\n\u001b[32m     14\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mgeopandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mgpd\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m16\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mSSTutils\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mstu\u001b[39;00m\n\u001b[32m     18\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mwarnings\u001b[39;00m\n\u001b[32m     19\u001b[39m warnings.filterwarnings(\u001b[33m'\u001b[39m\u001b[33mignore\u001b[39m\u001b[33m'\u001b[39m)\n\n\u001b[31mModuleNotFoundError\u001b[39m: No module named 'SSTutils'","ename":"ModuleNotFoundError","evalue":"No module named 'SSTutils'"}],"key":"Bfoi0facnH"}],"key":"pAXibORWMj"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the landsat STAC catalog location\nurl = 'https://landsatlook.usgs.gov/stac-server'\n\n# For atm correction\nbasepath = Path('/home/jovyan/Landsat_SST_algorithm')\nlsatpath = basepath / 'Data'\natmpath = lsatpath / 'AtmCorrection'\nmodout_path = lsatpath / 'MOD07_L2'\n\nWV = 'Water_Vapor'\n\n# For search and tile plot for Landsat\nsatellite = 'Landsat8'\ncollection = 'landsat-c2l1' # Landsat Collection 2, Level 1 - includes L8 and L9\ncolnm = ['landsat:wrs_path','landsat:wrs_row']\ngjson_outfile = lsatpath / f'{satellite}.geojson'\n\n# # For scene search and plot\n\ninterp = 1\n\nregion = 'Cosgrove'\n\nif region=='Cosgrove':\n    SSTpath = lsatpath / 'SST/MODcalib/Cosgrove/'\n    bbox = (-103.0, -73.5, -102.0, -73.42) # LatboundsC from LandsatCalibration20201031\n    # Cosgrove full run \n    timeRange = '2021-09-01/2023-04-07'\n    # [0:1] Cosgrove bbox\n    # timeRange = '2022-11-01/2023-03-27'\nelif region=='DotsonPolynya':\n    SSTpath = lsatpath / 'SST/MODcalib/DotsonPolynya/'\n    bbox = (-113, -73.9, -111.5, -73.59) # Dotson polynya\n    # Dotson full run\n    timeRange = '2021-09-01/2023-05-31'\n    # [0:1] Dotson bbox\n    # timeRange = '2022-11-01/2023-03-27'\nelif region=='PineIslandPlume':\n    SSTpath = lsatpath / 'SST/UncalibratedSST/PineIslandPlume/'\n    bbox = (-101.98,-75.09,-101.65,-75.05) # PIG plume for analysis - 2014\n    # bbox = (-101.88,-75.23,-100.35,-74.76) # PIG ice front for analysis\n    # bbox = (-101.8,-75.23,-100.50,-74.80) # PIG 2019?\n    # PIG full run - NOT narrowed down yet\n    timeRange = '2021-09-01/2023-04-07'\nelif region=='DotsonIntercomp':\n    SSTpath = lsatpath / 'SST/Validation/DotsonIntercomp/'\n    bbox = (-113.5,-74.20,-113.17,-74.11) # Dotson plume for analysis\n    # Dotson intercomp run\n    timeRange = '2021-09-01/2023-03-31'\nelif region=='Burke':\n    SSTpath = lsatpath / 'SST/MODcalib/Burke/'\n    bbox = (-104.2,-73.81, -103.8, -73.42) # Outside Cosgrove south of Burke  \n    # Burke full run\n    timeRange = '2021-09-01/2023-04-06'","visibility":"show","key":"PbJmaLRNaY"},{"type":"output","id":"bnj43GPz8AlOxdxCPuX3n","data":[],"visibility":"show","key":"WNEzDpmlHI"}],"visibility":"show","key":"opp009e9FW"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We set up authentication for accessing all data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tjQj2lU7Y4"}],"key":"u0gfcjJGaX"}],"visibility":"show","key":"kDitQfqnBs"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Authenticate for boto S3 access, etc.\nos.environ[\"AWS_REQUEST_PAYER\"] = \"requester\"\naws_session = AWSSession(boto3.Session(), requester_pays=True)\n\n# Setup and authenticate dask\nfrom dask.distributed import Client\nimport logging\nclient = Client(processes=True, n_workers=4, \n                threads_per_worker=1,\n                silence_logs=logging.ERROR)\nclient.run(lambda: os.environ[\"AWS_REQUEST_PAYER\"] == \"requester\" )\nclient\n\n# Authenticate for accessing NASA data (MODIS)\nauth = earthaccess.login(strategy=\"interactive\")","visibility":"show","key":"oFlpJHtw0Z"},{"type":"output","id":"K5PTB9qfchNE2q9Hs6bfF","data":[],"visibility":"show","key":"UydMdqxvFe"}],"visibility":"show","key":"zF4Oh99AYl"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Search for desired Landsat scenes\nitems = stu.search_stac(url, collection, gjson_outfile=gjson_outfile, bbox=bbox, timeRange=timeRange)\n\n# Open stac catalog for some needed info\ncatalog = intake.open_stac_item_collection(items)\n\n# Load the geojson file\ngf = gpd.read_file(gjson_outfile)","visibility":"show","key":"AMuTWkGAq1"},{"type":"output","id":"ScKwjAXvbUVwNSfa-YC3s","data":[],"visibility":"show","key":"I5PObYCuuJ"}],"visibility":"show","key":"V1wt2T3Bo0"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot tiles of all scenes found\nstu.plot_search(gf,satellite,colnm)","visibility":"show","key":"qn2Xn77qiJ"},{"type":"output","id":"0M5sBep2rBmX0B23EKFR4","data":[],"visibility":"show","key":"HVjDF2S1pS"}],"visibility":"show","key":"SyUCmtCe44"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note the bands you would like to include are assigned by passing the bandNames parameter to landsat_to_xarray using the following codes:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Xy5zKsyuN6"}],"key":"SSpeQNzbIk"}],"key":"rLpiaRKQXr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"â€˜coastalâ€™, â€˜blueâ€™, â€˜greenâ€™, â€˜redâ€™, â€˜nir08â€™, â€˜swir16â€™, â€˜swir22â€™, â€˜panâ€™, â€˜cirrusâ€™, â€˜lwir11â€™, â€˜lwir12â€™, â€˜qa_pixelâ€™","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IUx0gs8f9L"}],"key":"GEvxqNpIgY"}],"key":"y21pTDE7L9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Process Landsat scenes to acquire sea surface temperature","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dCcsFlgqYZ"}],"identifier":"process-landsat-scenes-to-acquire-sea-surface-temperature","label":"Process Landsat scenes to acquire sea surface temperature","html_id":"process-landsat-scenes-to-acquire-sea-surface-temperature","implicit":true,"key":"JlMiOIt3ET"}],"key":"loSDbLzkPU"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert bounding box to polar for checking if landsat has any data in bounding box\nsource_crs = 'epsg:4326' \ntarget_crs = 'epsg:3031' # Coordinate system of the file\n\nsbox,checkbox = stu.lsat_reproj(source_crs,target_crs,(bbox[0],bbox[1],bbox[2],bbox[3]))\n\n# Create polygon for later cropping\npolygon = Polygon([(sbox[0][0],sbox[0][1]),(sbox[3][0],sbox[3][1]),(sbox[2][0],sbox[2][1]),(sbox[1][0],sbox[1][1])])\n\n# Create min/max boundaries for trimming image before crop_xarray to cut down on processing times\nminx, miny, maxx, maxy = polygon.bounds\npolarx = [minx, maxx]\npolary = [miny, maxy]","visibility":"show","key":"N2HOd0jfXx"},{"type":"output","id":"Nue4JohOuszSe22fb2cGT","data":[],"visibility":"show","key":"WsTXVgHxwb"}],"visibility":"show","key":"tpu3BJIuwn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Include only Landsat 8 scenes\ncatalog_list = [x for x in items if x.id[3]=='8']\n\nsceneid = catalog_list[0]\nprint(sceneid.id)\n    \nscene = catalog[sceneid.id]\ntimestr = scene.metadata['datetime'].strftime('%H%M%S')\n\noutFile = f'{SSTpath}/{sceneid.id}_{timestr}_Cel.tif'","key":"nSdQErnDOp"},{"type":"output","id":"hH1VYYYzK7DCmLLbd0VnA","data":[],"key":"Xim2WX8leB"}],"key":"aj0h3gaHrm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Open all desired bands for one scene\nls_scene = stu.landsat_to_xarray(sceneid,catalog)\nls_scene = ls_scene.rio.write_crs(\"epsg:3031\", inplace=True)","key":"XreaEfWXyG"},{"type":"output","id":"U9EYfqeY2ewNuTq8HrFvi","data":[],"key":"oZnInn1BLy"}],"key":"OCfxAlH5m3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Masking Unwanted Pixels in Landsat Thermal Imagery","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yeBzHmmkWm"}],"identifier":"masking-unwanted-pixels-in-landsat-thermal-imagery","label":"Masking Unwanted Pixels in Landsat Thermal Imagery","html_id":"masking-unwanted-pixels-in-landsat-thermal-imagery","implicit":true,"key":"VpVEBgbwdq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In our Landsat SST algorithm, the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tT784ebplI"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"first preprocessing step","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ouh810ocwl"}],"key":"ool1RmfU3I"},{"type":"text","value":" is to ensure that we only process ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QnFSdZ6ZgQ"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"ocean pixels","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UYlQuLCnlu"}],"key":"LgXif1VNtH"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PUw9OugMeF"}],"key":"ayWDjsLUYs"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Why?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vlc3K3iHx3"},{"type":"break","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YY93deexPW"},{"type":"text","value":"Thermal infrared measurements are highly sensitive to atmospheric effects, particularly ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"E61GF6BgFi"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"water vapor","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zE161so0Va"}],"key":"WkEBt4RW9A"},{"type":"text","value":", and cannot provide accurate surface temperature if ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kKFzHzl1RG"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"clouds","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yhQEsGWN6p"}],"key":"em1Gsa5zaE"},{"type":"text","value":" are present.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"gIiFPSjzeg"},{"type":"break","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Xis9EbLqcC"},{"type":"text","value":"Additionally, we ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"R1JjY8NvEM"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"donâ€™t want SST from land or ice","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"d2e2eNwC29"}],"key":"EebKrmz8kn"},{"type":"text","value":" pixels.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KcYQDfQ8cA"}],"key":"YRmFBZHtZm"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"This means our first preprocessing task is ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"c5dLDWv2GC"},{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"masking","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"E6JEuNVOAq"}],"key":"EBk8cjeBHU"},{"type":"text","value":"â€”identifying and excluding pixels that shouldnâ€™t be processed.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Q66J0syVFh"}],"key":"GGszGLgwAT"},{"type":"thematicBreak","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Xp9ym5Zi5C"},{"type":"heading","depth":3,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Sources for Pixel Classification","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZrFsGBH9pZ"}],"identifier":"sources-for-pixel-classification","label":"Sources for Pixel Classification","html_id":"sources-for-pixel-classification","implicit":true,"key":"ASiddFqEVB"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Landsat imagery includes a ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"WtcKRXxjRC"},{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"inlineCode","value":"qa_pixel","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"wkSQVyrDS8"},{"type":"text","value":" band","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"T1cMxXD171"}],"key":"crtf6lxObt"},{"type":"text","value":" with bit flags that encode surface classification for each pixel.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"rgGdbPhycO"}],"key":"s5krjPvmje"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"We can:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Fxo1A2Bjnv"}],"key":"hGxAjarn32"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":18,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"J46dYonuMF"},{"type":"inlineCode","value":"qa_pixel","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"V1uKkDnhbG"},{"type":"text","value":" band","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"IWljHKtI0H"}],"key":"Dmj7hByllx"},{"type":"text","value":" to mask unwanted pixels (our approach here).","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"flRCtJOZSD"}],"key":"mDO3iEIu0L"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Replace or augment","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Y3xCDO1Tq2"}],"key":"EaaSETs39N"},{"type":"text","value":" with a machine learning classifier (e.g., neural network) for more accurate cloud detection.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"DxvJWSIbU4"}],"key":"ijHI5Zn7x4"}],"key":"bND1vAWTXY"},{"type":"blockquote","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"strong","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"Note:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"NPIKiQ0l9M"}],"key":"i5FKMWe8CO"},{"type":"text","value":" The standard Landsat cloud classification is not well-suited for detecting certain types of cloud. ML-based classifiers often outperform it for certain conditions.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"BgpfzOPi6K"}],"key":"eUik8fGQZB"}],"key":"SfVjIrLcJP"},{"type":"thematicBreak","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"WpHLSY3uCz"},{"type":"heading","depth":3,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Step 1 â€“ Inspect the QA Band","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"EmT58gEdSh"}],"identifier":"step-1-inspect-the-qa-band","label":"Step 1 â€“ Inspect the QA Band","html_id":"step-1-inspect-the-qa-band","implicit":true,"key":"SWXu0tOKv9"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Letâ€™s first inspect whatâ€™s inside the QA band:","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"hKcqvDD70G"}],"key":"WdxYvJhOQ0"}],"key":"yElYcqdn6y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"qa = ls_scene.sel(band='qa_pixel').astype('uint16')\nunique_values, counts = np.unique(qa, return_counts=True)\nprint(\"Unique QA codes:\", unique_values)","key":"nCO6ReZaN0"},{"type":"output","id":"rK84jWz9znoDQaFTO8Dle","data":[],"key":"LhFpgJmB9N"}],"key":"Ig5jxBu8JC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cd /home/jovyan/landsatproduct-cookbook/","key":"OIpZl4ZypG"},{"type":"output","id":"O2u77ptb1HTtkpHKdRjVx","data":[],"key":"fkjdgfaqBY"}],"key":"BjEIDAnjsM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def create_masks(ls_scene, cloud_mask=True, ice_mask=False, ocean_mask=False):\n    \"\"\"\n    Creates cloud, ice, and ocean masks from a Landsat scene QA band. By default, \n    clouds are labeled as 1, ice as 2, ocean as 3, and all other pixels are NaN.\n\n    Parameters\n    ----------\n    ls_scene : xarray.DataArray\n        A Landsat scene loaded with a 'qa_pixel' band (as created by `landsat_to_xarray`).\n    cloud_mask : bool, optional\n        Whether to generate the cloud mask. Default is True.\n    ice_mask : bool, optional\n        Whether to generate the ice mask. Default is False.\n    ocean_mask : bool, optional\n        Whether to generate the ocean mask. Default is False.\n\n    Returns\n    -------\n    xarray.DataArray\n        The same input xarray object, but with an added `\"mask\"` coordinate. \n        In that mask, cloud pixels are assigned 1, ice pixels 2, ocean pixels 3, \n        and everything else is set to NaN.\n    \"\"\"\n    \n    cloud = []\n    ocean = []\n    ice = []\n\n    qa = ls_scene.sel(band='qa_pixel').astype('uint16')\n\n    n,c = np.unique(qa, return_counts=True)\n\n    for j in range(len(n)):\n        longform = f'{n[j]:016b}'\n        if (longform[-7]=='0')|(longform[-3]=='1'): #bit 2 and 6 are for cirrus and clear sky\n            cloud.append(n[j])\n        if longform[-8:]=='11000000': #bit 6 and 7 give clear sky and water, lower bits need to be 0 \n            ocean.append(n[j])\n        if longform[-7:]=='1100000': #bit 5 and 6 give ice and clear sky \n            ice.append(n[j])\n\n    if 0 in cloud:\n        cloud.remove(0)\n    if 1 in cloud:\n        cloud.remove(1)\n\n    # mask cloud, ice, and ocean\n    if cloud_mask==True:\n        # cloud is 2\n        mask_c = xr.where(qa.isin(cloud), 1, np.nan)\n\n    if ice_mask==True:\n        mask_c = xr.where(qa.isin(ice), 2, mask_c)\n\n    if ocean_mask==True:\n        mask_c = xr.where(qa.isin(ocean), 3, mask_c)\n\n    ls_scene.coords['mask'] = (('y', 'x'), mask_c.data)\n        \n    return ls_scene\n\n##########################\n\ndef normalize(array):\n    '''\n    normalize a dask array so all value are between 0 and 1\n    '''\n    array_min = array.min(skipna=True)\n    array_max = array.max(skipna=True)\n    return (array - array_min) / (array_max - array_min)\n\n##########################\n\ndef search_stac(url, collection, gjson_outfile=None, bbox=None, timeRange=None, filename=None):\n    \"\"\"\n    Search a STAC API for Landsat images based on either:\n    - Bounding box and time range, or\n    - Specific filename (STAC 'id').\n\n    Parameters:\n    -----------\n    url : str\n        URL to the STAC API.\n    collection : str\n        Collection name (e.g., \"landsat-c2-l2\").\n    gjson_outfile : str or None\n        Output file to save the search result as GeoJSON (optional).\n    bbox : list or None\n        Bounding box [west, south, east, north] (optional).\n    timeRange : str or None\n        Time range in ISO format, e.g., '2021-09-01/2023-03-31' (optional).\n    filename : str or None\n        Exact filename (product ID) to search for (optional).\n\n    Returns:\n    --------\n    item_collection : pystac.ItemCollection\n        Collection of matching STAC items.\n    \"\"\"\n    \n    api = pystac_client.Client.open(url)\n\n    if filename:\n        # Search by filename (ID)\n        search = api.search(\n            collections=[collection],\n            ids=[filename],\n        )\n        # print(f\"Searching for filename: {filename}\")\n    \n    elif bbox and timeRange:\n        # Search by bbox and timeRange\n        search = api.search(\n            bbox=bbox,\n            datetime=timeRange,\n            collections=[collection],\n        )\n        # print(f\"Searching for items in bbox {bbox} and timeRange {timeRange}\")\n    \n    else:\n        raise ValueError(\"Must provide either a filename, or both bbox and timeRange.\")\n\n    items = search.item_collection()\n\n    # print(f\"Found {len(items)} item(s)\")\n\n    if gjson_outfile:\n        items.save_object(gjson_outfile)\n    \n    return items","key":"CsMzNgv9uJ"},{"type":"output","id":"DTmULFYPUROdCtihizK27","data":[],"key":"UI9s6WIaLf"}],"key":"etxedtUxnx"}],"key":"JHW7tkP518"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"How to Cite This Cookbook","url":"/notebooks/how-to-cite","group":"Preamble"},"next":{"title":"Calibration","url":"/notebooks/calibration","group":"Preamble"}}},"domain":"http://localhost:3000"}